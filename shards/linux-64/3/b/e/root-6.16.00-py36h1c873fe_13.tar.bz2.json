{
  "channeldata": {
    "activate.d": true,
    "binary_prefix": true,
    "deactivate.d": true,
    "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned on. Here are a few things to try:  * `root`: you can start up a session and see the splash screen; Control-D to exit. * `python` followed by `import ROOT` will load PyROOT. * `root --notebook` will start a notebook server with a ROOT kernel choice. * `rootbrowse` will open a TBrowser session so you can look through files. * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot. * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir. * `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.  See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.  Caveats =======  General -------  The ROOT package will prepare the required compilers (see below). Everything in Conda is symlinked into `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*` scripts should not be used. Graphics, `rootbrowse`, etc. all should work.  Linux -----  On Linux, there really aren't any special caveats, just a few general to Conda itself, and the compilers package. When ROOT is in the active environment, `g++` and `$CXX` are the conda compilers, GCC 7.3.  ROOT was built with and will report `-std=c++17` from `root-config`.   macOS -----  The caveats on macOS are a bit larger, but have the same reason for existing as on Linux. When ROOT is in the active environment, `clang++` and `$CXX` will be the Conda compilers; but those compilers are Clang 4.0 and the macOS 10.9 SDK.  You must install the macOS 10.9 SDK, [as mentioned in the conda documentation](https://conda.io/projects/conda-build/en/latest/source/compiler-tools.html#macos-sdk), if you want to build anything.  And, while normal ROOT and PyROOT are fine, commands like `root MyFile.C+` actively build things, so this is probably something many users will want to do. Once the macOS is downloaded and extracted on your system, you should set `CONDA_BUILD_SYSROOT` to point to the SDK root location, such as `/opt/MacOSX10.9.sdk`. This will not be necessary once ROOT moves to using LLVM 8.  ROOT does not link to Python directly in order to properly support PyROOT from Python, but has been patched to provide the correct behavior to allow PyROOT to also be used from ROOT's C++ command line.  ROOT was built with and will report `-std=c++1z` from `root-config`.",
    "dev_url": "https://github.com/root-project/root/",
    "doc_source_url": null,
    "doc_url": "https://root.cern/documentation",
    "home": "https://root.cern/",
    "icon_hash": null,
    "icon_url": null,
    "identifiers": null,
    "keywords": null,
    "license": "LGPL-2.1",
    "post_link": true,
    "pre_link": false,
    "pre_unlink": false,
    "recipe_origin": null,
    "run_exports": {
      "6.16.00": {
        "weak": [
          "root >=6.16.0,<6.16.1.0a0"
        ]
      }
    },
    "source_git_url": null,
    "source_url": "https://github.com/root-project/root/archive/v6-16-00.tar.gz",
    "subdirs": [
      "linux-64"
    ],
    "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R.",
    "tags": null,
    "text_prefix": true,
    "timestamp": 1557102577,
    "version": "6.16.00"
  },
  "channeldata_version": 1,
  "feedstock": null,
  "labels": [
    "main",
    "cf202003"
  ],
  "package": "root-6.16.00-py36h1c873fe_13.tar.bz2",
  "repodata": {
    "build": "py36h1c873fe_13",
    "build_number": 13,
    "constrains": [
      "cling 9999",
      "root5 9999"
    ],
    "depends": [
      "afterimage >=1.21,<1.22.0a0",
      "cfitsio",
      "compilers",
      "davix >=0.7.2,<0.8.0a0",
      "fftw",
      "freetype >=2.9.1,<3.0a0",
      "gdk-pixbuf",
      "giflib >=5.1.7,<5.1.8.0a0",
      "glew >=2.0.0,<2.1.0a0",
      "gsl >=2.4,<2.5.0a0",
      "libblas >=3.8.0,<4.0a0",
      "libcblas >=3.8.0,<4.0a0",
      "libgcc-ng >=7.3.0",
      "libgfortran-ng >=7,<8.0a0",
      "libglu",
      "libpng >=1.6.35,<1.7.0a0",
      "librsvg >=2.44.3,<2.45.0a0",
      "libstdcxx-ng >=7.3.0",
      "libtiff >=4.0.9,<5.0a0",
      "libxml2 >=2.9.9,<2.10.0a0",
      "lz4",
      "lz4-c >=1.8.3,<1.8.4.0a0",
      "metakernel",
      "notebook",
      "numpy >=1.9.3,<2.0a0",
      "openssl >=1.1.1a,<1.1.2a",
      "pcre >=8.41,<9.0a0",
      "pythia8",
      "python >=3.6,<3.7.0a0",
      "qt >=5.9.7,<5.10.0a0",
      "sqlite >=3.26.0,<4.0a0",
      "tbb >=2019.5",
      "tbb-devel",
      "vdt >=0.4.3,<0.4.4.0a0",
      "xorg-libx11",
      "xorg-libxau",
      "xorg-libxcursor",
      "xorg-libxext",
      "xorg-libxft",
      "xorg-libxpm",
      "xrootd >=4.9.1,<4.10.0a0",
      "xz >=5.2.4,<5.3.0a0",
      "zlib >=1.2.11,<1.3.0a0"
    ],
    "license": "LGPL-2.1",
    "license_family": "LGPL",
    "md5": "7c24bbb5fea82e0c9e94df31c9e4301e",
    "name": "root",
    "sha256": "aebf9b3e39a0c8ff52df35603d9301fd0e163be42918c84ac90961884bd3a3ec",
    "size": 72360956,
    "subdir": "linux-64",
    "timestamp": 1557102577214,
    "version": "6.16.00"
  },
  "repodata_version": 1,
  "subdir": "linux-64",
  "url": "https://conda.anaconda.org/conda-forge/linux-64/root-6.16.00-py36h1c873fe_13.tar.bz2"
}