{"labels": ["main"], "repodata_version": 1, "repodata": {"build": "py37hb6426ff_1", "build_number": 1, "constrains": ["__osx >=10.13"], "depends": ["compilers", "libcxx >=10.0.1", "libgfortran >=4.0.0,<5.0.0.a0", "metakernel", "notebook", "python >=3.7,<3.8.0a0", "python_abi 3.7.* *_cp37m", "root-binaries 6.22.2 py37hb6426ff_1", "root-dependencies 6.22.2 py37hb6426ff_1", "root_base 6.22.2 py37h7ab357a_1"], "license": "LGPL-2.1-only", "license_family": "LGPL", "md5": "d3fd9c0a5fb742aef053a503903da44a", "name": "root", "sha256": "7e82c29e837aa4c8617aa4babad80ca2510a25a95399552c62ea09d0d4a424b4", "size": 25162, "subdir": "osx-64", "timestamp": 1597992006133, "version": "6.22.2"}, "subdir": "osx-64", "package": "root-6.22.2-py37hb6426ff_1.tar.bz2", "url": "https://github.com/regro/releases/releases/download/osx-64/root-6.22.2-py37hb6426ff_1.tar.bz2/root-6.22.2-py37hb6426ff_1.tar.bz2", "feedstock": "root-feedstock", "channeldata_version": 1, "channeldata": {"activate.d": false, "binary_prefix": false, "deactivate.d": false, "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned on. Here are a few things to try:  * `root`: you can start up a session and see the splash screen; Control-D to exit. * `python` followed by `import ROOT` will load PyROOT. * `root --notebook` will start a notebook server with a ROOT kernel choice. * `rootbrowse` will open a TBrowser session so you can look through files. * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot. * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir. * `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.  See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.  The ROOT package will prepare the required compilers. Everything in Conda is symlinked into `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*` scripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.  There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid having a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.  ROOT was built with and will report `-std=c++17` from `root-config`.", "dev_url": "https://github.com/root-project/root/", "doc_source_url": null, "doc_url": "https://root.cern/documentation", "home": "https://root.cern/", "icon_hash": null, "icon_url": null, "identifiers": null, "keywords": null, "license": "LGPL-2.1-only", "post_link": false, "pre_link": false, "pre_unlink": false, "recipe_origin": null, "run_exports": {}, "source_git_url": null, "source_url": "https://github.com/root-project/root/archive/v6-22-02.tar.gz", "subdirs": ["osx-64"], "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other languages such as Python and R.", "tags": null, "text_prefix": false, "timestamp": 1597992006, "version": "6.22.2"}}